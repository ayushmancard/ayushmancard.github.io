<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="HandheldFriendly" content="True">
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Calendar 2025</title>
  <meta name="description" content="The year 2025 is a common year (not a leap year) that began on a Wednesday and is the 2025th year of the Common Era. It is the 25th year of the 3rd millennium and the 21st century.">
  <link rel="canonical" href="/calendar2025">
  <meta name="robots" content="index, follow" />
  <link rel="icon" type="image/png" href="img/favicon-96x96.png" sizes="96x96" />
<link rel="icon" type="image/svg+xml" href="img/favicon.svg" />
<link rel="shortcut icon" href="img/favicon.ico" />
<link rel="apple-touch-icon" sizes="180x180" href="img/apple-touch-icon.png" />
<meta name="apple-mobile-web-app-title" content="MyWebSite" />
<link rel="manifest" href="img/site.webmanifest" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: #333;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 20px;
            margin-bottom: 30px;
        }
        
        h1 {
            font-size: 2.8rem;
            color: #4361ee;
            margin-bottom: 10px;
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: #6c757d;
        }
        
        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
            background: white;
            padding: 15px 20px;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }
        
        .year-selector {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .year-btn {
            background: #4361ee;
            color: white;
            border: none;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .year-btn:hover {
            background: #3a56d4;
        }
        
        #current-year {
            font-size: 1.5rem;
            font-weight: 600;
            min-width: 80px;
            text-align: center;
        }
        
        .export-buttons {
            display: flex;
            gap: 10px;
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn-primary {
            background: #4361ee;
            color: white;
        }
        
        .btn-primary:hover {
            background: #3a56d4;
            transform: translateY(-2px);
        }
        
        .btn-success {
            background: #4cc9f0;
            color: white;
        }
        
        .btn-success:hover {
            background: #3ab7dc;
            transform: translateY(-2px);
        }
        
        .calendar-view {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .month-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .month-header {
            background: #4361ee;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .weekdays {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            background: #f0f5ff;
            font-weight: 600;
            text-align: center;
            padding: 10px 0;
            font-size: 0.9rem;
        }
        
        .days {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
            padding: 10px;
        }
        
        .day {
            height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.9rem;
            position: relative;
        }
        
        .day:hover {
            background: #f0f5ff;
        }
        
        .other-month {
            color: #adb5bd;
        }
        
        .today {
            background: #4361ee;
            color: white;
            font-weight: bold;
        }
        
        .has-event::after {
            content: '';
            position: absolute;
            bottom: 3px;
            width: 5px;
            height: 5px;
            background: #f72585;
            border-radius: 50%;
        }
        
        /* Event List Styles */
        .events-section {
            background: white;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 30px;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f5ff;
        }
        
        .section-title {
            font-size: 1.5rem;
            color: #4361ee;
        }
        
        .event-filters {
            display: flex;
            gap: 10px;
        }
        
        .filter-btn {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            background: white;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .filter-btn.active {
            background: #4361ee;
            color: white;
            border-color: #4361ee;
        }
        
        .events-list {
            display: grid;
            gap: 15px;
        }
        
        .event-card {
            display: flex;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
        }
        
        .event-date {
            min-width: 80px;
            background: #4361ee;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 15px;
        }
        
        .event-day {
            font-size: 1.8rem;
            font-weight: bold;
            line-height: 1;
        }
        
        .event-month {
            font-size: 0.9rem;
            text-transform: uppercase;
        }
        
        .event-details {
            flex-grow: 1;
            padding: 15px;
            background: #f8f9fa;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .event-info h3 {
            color: #333;
            margin-bottom: 5px;
        }
        
        .event-info p {
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .event-type {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .event-type.meeting {
            background: #4cc9f0;
            color: white;
        }
        
        .event-type.birthday {
            background: #7209b7;
            color: white;
        }
        
        .event-type.holiday {
            background: #f77f00;
            color: white;
        }
        
        .event-type.general {
            background: #4caf50;
            color: white;
        }
        
        .no-events {
            text-align: center;
            padding: 30px;
            color: #6c757d;
        }
        
        /* Modal Styles */
        .event-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .modal-content {
            background: white;
            padding: 25px;
            border-radius: 12px;
            width: 100%;
            max-width: 500px;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #6c757d;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
        }
        
        textarea {
            min-height: 100px;
            resize: vertical;
        }
        
        .modal-event-list {
            margin-top: 15px;
            max-height: 200px;
            overflow-y: auto;
        }
        
        .event-item {
            padding: 10px;
            border-radius: 8px;
            background: #f8f9fa;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .event-item-details h4 {
            margin-bottom: 5px;
            color: #4361ee;
        }
        
        .event-item-details p {
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .delete-event {
            color: #dc3545;
            cursor: pointer;
            padding: 5px;
        }
        
        footer {
            text-align: center;
            padding: 20px;
            color: #6c757d;
            margin-top: 30px;
        }
        
        @media (max-width: 992px) {
            .calendar-view {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (max-width: 768px) {
            .calendar-view {
                grid-template-columns: 1fr;
            }
            
            .controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .year-selector {
                justify-content: center;
            }
            
            .export-buttons {
                justify-content: center;
            }
            
            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .event-filters {
                flex-wrap: wrap;
            }
            
            .event-card {
                flex-direction: column;
            }
            
            .event-date {
                flex-direction: row;
                justify-content: space-between;
                min-width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Complete Calendar</h1>
            <p class="subtitle">12-month view with event management and export options</p>
        </header>
        
        <div class="controls">
            <div class="year-selector">
                <button class="year-btn" id="prev-year"><i class="fas fa-chevron-left"></i></button>
                <span id="current-year">2023</span>
                <button class="year-btn" id="next-year"><i class="fas fa-chevron-right"></i></button>
            </div>
            
            <div class="export-buttons">
                <button class="btn btn-primary" id="export-png"><i class="fas fa-download"></i> Export PNG</button>
                <button class="btn btn-success" id="export-pdf"><i class="fas fa-file-pdf"></i> Export PDF</button>
            </div>
        </div>
        
        <div class="calendar-view" id="calendar-container">
            <!-- Calendar months will be generated here -->
        </div>
        
        <!-- Events List Section -->
        <div class="events-section">
            <div class="section-header">
                <h2 class="section-title">All Events</h2>
                <div class="event-filters">
                    <button class="filter-btn active" data-filter="all">All Events</button>
                    <button class="filter-btn" data-filter="meeting">Meetings</button>
                    <button class="filter-btn" data-filter="birthday">Birthdays</button>
                    <button class="filter-btn" data-filter="holiday">Holidays</button>
                </div>
            </div>
            
            <div class="events-list" id="events-list">
                <!-- Events will be populated here -->
            </div>
        </div>
    </div>
    
    <!-- Event Modal -->
    <div class="event-modal" id="event-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modal-title">Add Event</h3>
                <button class="close-btn" id="close-modal">&times;</button>
            </div>
            <div>
                <div class="form-group">
                    <label for="event-title">Event Title</label>
                    <input type="text" id="event-title" placeholder="Enter event title">
                </div>
                <div class="form-group">
                    <label for="event-date">Date</label>
                    <input type="text" id="event-date" disabled>
                </div>
                <div class="form-group">
                    <label for="event-type">Event Type</label>
                    <select id="event-type">
                        <option value="general">General</option>
                        <option value="meeting">Meeting</option>
                        <option value="birthday">Birthday</option>
                        <option value="holiday">Holiday</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="event-notes">Notes (optional)</label>
                    <textarea id="event-notes" placeholder="Add details about your event"></textarea>
                </div>
                <button class="btn btn-primary" id="save-event"><i class="fas fa-save"></i> Save Event</button>
                
                <div class="modal-event-list" id="modal-event-list">
                    <!-- Existing events will be listed here -->
                </div>
            </div>
        </div>
    </div>
    
    <footer>
        <p>© 2023 Complete Calendar App | Click on any date to add events</p>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize variables
            let currentYear = new Date().getFullYear();
            let selectedDate = null;
            let events = JSON.parse(localStorage.getItem('calendarEvents')) || {};
            let currentFilter = 'all';
            
            // DOM elements
            const calendarContainer = document.getElementById('calendar-container');
            const currentYearElement = document.getElementById('current-year');
            const eventModal = document.getElementById('event-modal');
            const modalTitle = document.getElementById('modal-title');
            const eventDateInput = document.getElementById('event-date');
            const modalEventList = document.getElementById('modal-event-list');
            const eventsList = document.getElementById('events-list');
            const filterButtons = document.querySelectorAll('.filter-btn');
            
            // Initialize the calendar
            function initCalendar() {
                currentYearElement.textContent = currentYear;
                calendarContainer.innerHTML = '';
                
                // Create 12 month calendars
                for (let month = 0; month < 12; month++) {
                    createMonthCalendar(month);
                }
                
                // Update events list
                renderEventsList();
            }
            
            // Create calendar for a specific month
            function createMonthCalendar(month) {
                const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
                                  'July', 'August', 'September', 'October', 'November', 'December'];
                
                const monthContainer = document.createElement('div');
                monthContainer.className = 'month-container';
                
                // Month header
                const monthHeader = document.createElement('div');
                monthHeader.className = 'month-header';
                monthHeader.textContent = monthNames[month];
                monthContainer.appendChild(monthHeader);
                
                // Weekdays header
                const weekdays = document.createElement('div');
                weekdays.className = 'weekdays';
                
                const weekdayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                for (let day of weekdayNames) {
                    const dayElement = document.createElement('div');
                    dayElement.textContent = day;
                    weekdays.appendChild(dayElement);
                }
                
                monthContainer.appendChild(weekdays);
                
                // Days grid
                const daysContainer = document.createElement('div');
                daysContainer.className = 'days';
                
                const firstDay = new Date(currentYear, month, 1);
                const lastDay = new Date(currentYear, month + 1, 0);
                const daysInMonth = lastDay.getDate();
                const startDay = firstDay.getDay();
                
                // Previous month's days
                const prevMonthLastDay = new Date(currentYear, month, 0).getDate();
                for (let i = startDay - 1; i >= 0; i--) {
                    const day = createDay(prevMonthLastDay - i, 'other-month');
                    daysContainer.appendChild(day);
                }
                
                // Current month's days
                const today = new Date();
                for (let i = 1; i <= daysInMonth; i++) {
                    const day = createDay(i);
                    
                    // Check if it's today
                    if (currentYear === today.getFullYear() && 
                        month === today.getMonth() && 
                        i === today.getDate()) {
                        day.classList.add('today');
                    }
                    
                    // Check if it has events
                    const dateKey = `${currentYear}-${month + 1}-${i}`;
                    if (events[dateKey] && events[dateKey].length > 0) {
                        day.classList.add('has-event');
                    }
                    
                    daysContainer.appendChild(day);
                }
                
                // Next month's days
                const daysNeeded = 42 - (startDay + daysInMonth); // 6 rows of 7 days
                for (let i = 1; i <= daysNeeded; i++) {
                    const day = createDay(i, 'other-month');
                    daysContainer.appendChild(day);
                }
                
                monthContainer.appendChild(daysContainer);
                calendarContainer.appendChild(monthContainer);
            }
            
            // Create a day element
            function createDay(dayNumber, className = '') {
                const day = document.createElement('div');
                day.className = `day ${className}`;
                day.textContent = dayNumber;
                
                if (className !== 'other-month') {
                    day.addEventListener('click', function() {
                        const month = this.parentElement.parentElement.querySelector('.month-header').textContent;
                        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
                                          'July', 'August', 'September', 'October', 'November', 'December'];
                        const monthIndex = monthNames.indexOf(month);
                        
                        selectedDate = `${currentYear}-${monthIndex + 1}-${dayNumber}`;
                        openEventModal(selectedDate);
                    });
                }
                
                return day;
            }
            
            // Open event modal
            function openEventModal(date) {
                const [year, month, day] = date.split('-');
                const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
                                  'July', 'August', 'September', 'October', 'November', 'December'];
                
                modalTitle.textContent = `Events for ${monthNames[parseInt(month) - 1]} ${day}, ${year}`;
                eventDateInput.value = `${monthNames[parseInt(month) - 1]} ${day}, ${year}`;
                
                // Display existing events
                displayEvents(date);
                
                eventModal.style.display = 'flex';
            }
            
            // Display events for a date in modal
            function displayEvents(date) {
                modalEventList.innerHTML = '';
                
                if (events[date] && events[date].length > 0) {
                    events[date].forEach((event, index) => {
                        const eventItem = document.createElement('div');
                        eventItem.className = 'event-item';
                        
                        const eventDetails = document.createElement('div');
                        eventDetails.className = 'event-item-details';
                        eventDetails.innerHTML = `
                            <h4>${event.title}</h4>
                            <p>Type: ${event.type.charAt(0).toUpperCase() + event.type.slice(1)}</p>
                            ${event.notes ? `<p>${event.notes}</p>` : ''}
                        `;
                        
                        const deleteBtn = document.createElement('div');
                        deleteBtn.className = 'delete-event';
                        deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
                        deleteBtn.addEventListener('click', function(e) {
                            e.stopPropagation();
                            events[date].splice(index, 1);
                            
                            // If no events left, remove the date key
                            if (events[date].length === 0) {
                                delete events[date];
                            }
                            
                            localStorage.setItem('calendarEvents', JSON.stringify(events));
                            displayEvents(date);
                            initCalendar(); // Refresh calendar to update event indicators
                        });
                        
                        eventItem.appendChild(eventDetails);
                        eventItem.appendChild(deleteBtn);
                        modalEventList.appendChild(eventItem);
                    });
                } else {
                    modalEventList.innerHTML = '<p>No events for this date.</p>';
                }
            }
            
            // Render events list
            function renderEventsList() {
                eventsList.innerHTML = '';
                
                // Get all events and sort by date
                const allEvents = [];
                
                for (const date in events) {
                    events[date].forEach(event => {
                        // Only show events for the current year
                        if (date.startsWith(currentYear)) {
                            allEvents.push({
                                date,
                                ...event
                            });
                        }
                    });
                }
                
                // Sort events by date
                allEvents.sort((a, b) => {
                    return new Date(a.date) - new Date(b.date);
                });
                
                // Filter events if needed
                const filteredEvents = currentFilter === 'all' 
                    ? allEvents 
                    : allEvents.filter(event => event.type === currentFilter);
                
                if (filteredEvents.length === 0) {
                    eventsList.innerHTML = `
                        <div class="no-events">
                            <i class="fas fa-calendar-times" style="font-size: 3rem; margin-bottom: 15px;"></i>
                            <h3>No events found</h3>
                            <p>Try selecting a different filter or add new events</p>
                        </div>
                    `;
                    return;
                }
                
                // Display events
                filteredEvents.forEach(event => {
                    const [year, month, day] = event.date.split('-');
                    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                                      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                    
                    const eventElement = document.createElement('div');
                    eventElement.className = 'event-card';
                    eventElement.innerHTML = `
                        <div class="event-date">
                            <div class="event-day">${day}</div>
                            <div class="event-month">${monthNames[parseInt(month) - 1]}</div>
                        </div>
                        <div class="event-details">
                            <div class="event-info">
                                <h3>${event.title}</h3>
                                <p>${event.notes || 'No additional details'}</p>
                            </div>
                            <span class="event-type ${event.type}">${event.type.charAt(0).toUpperCase() + event.type.slice(1)}</span>
                        </div>
                    `;
                    
                    eventsList.appendChild(eventElement);
                });
            }
            
            // Close event modal
            function closeEventModal() {
                eventModal.style.display = 'none';
                document.getElementById('event-title').value = '';
                document.getElementById('event-notes').value = '';
                document.getElementById('event-type').value = 'general';
            }
            
            // Save event
            function saveEvent() {
                const title = document.getElementById('event-title').value;
                const type = document.getElementById('event-type').value;
                const notes = document.getElementById('event-notes').value;
                
                if (!title) {
                    alert('Please enter an event title');
                    return;
                }
                
                if (!events[selectedDate]) {
                    events[selectedDate] = [];
                }
                
                events[selectedDate].push({
                    title,
                    type,
                    notes
                });
                
                localStorage.setItem('calendarEvents', JSON.stringify(events));
                
                document.getElementById('event-title').value = '';
                document.getElementById('event-notes').value = '';
                
                displayEvents(selectedDate);
                initCalendar(); // Refresh calendar to update event indicators
            }
            
            // Export as PNG
            function exportAsPNG() {
                html2canvas(calendarContainer).then(canvas => {
                    const link = document.createElement('a');
                    link.download = `calendar-${currentYear}.png`;
                    link.href = canvas.toDataURL('image/png');
                    link.click();
                });
            }
            
            // Export as PDF
            function exportAsPDF() {
                html2canvas(calendarContainer).then(canvas => {
                    const imgData = canvas.toDataURL('image/png');
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF('p', 'mm', 'a4');
                    
                    const width = doc.internal.pageSize.getWidth();
                    const height = doc.internal.pageSize.getHeight();
                    doc.addImage(imgData, 'PNG', 0, 0, width, height);
                    
                    doc.save(`calendar-${currentYear}.pdf`);
                });
            }
            
            // Set up event filters
            function setupFilters() {
                filterButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        // Remove active class from all buttons
                        filterButtons.forEach(btn => btn.classList.remove('active'));
                        
                        // Add active class to clicked button
                        this.classList.add('active');
                        
                        // Update current filter
                        currentFilter = this.getAttribute('data-filter');
                        
                        // Re-render events list
                        renderEventsList();
                    });
                });
            }
            
            // Event listeners
            document.getElementById('prev-year').addEventListener('click', function() {
                currentYear--;
                initCalendar();
            });
            
            document.getElementById('next-year').addEventListener('click', function() {
                currentYear++;
                initCalendar();
            });
            
            document.getElementById('close-modal').addEventListener('click', closeEventModal);
            
            document.getElementById('save-event').addEventListener('click', saveEvent);
            
            document.getElementById('export-png').addEventListener('click', exportAsPNG);
            
            document.getElementById('export-pdf').addEventListener('click', exportAsPDF);
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                if (event.target === eventModal) {
                    closeEventModal();
                }
            });
            
            // Initialize the calendar and filters
            initCalendar();
            setupFilters();
            
            // Add some sample events if none exist
            if (Object.keys(events).length === 0) {
                const today = new Date();
                const year = today.getFullYear();
                const month = today.getMonth() + 1;
                
                events[`${year}-${month}-15`] = [{
                    title: 'Team Meeting',
                    type: 'meeting',
                    notes: 'Weekly team sync up'
                }];
                
                events[`${year}-${month}-18`] = [{
                    title: 'Doctor Appointment',
                    type: 'general',
                    notes: 'Annual checkup'
                }];
                
                events[`${year}-${month}-21`] = [{
                    title: 'Birthday Party',
                    type: 'birthday',
                    notes: 'John\'s 30th birthday celebration'
                }];
                
                events[`${year}-${month}-27`] = [{
                    title: 'Conference',
                    type: 'meeting',
                    notes: 'Annual tech conference'
                }];
                
                localStorage.setItem('calendarEvents', JSON.stringify(events));
                initCalendar(); // Refresh to show sample events
            }
        });
    </script>
</body>
</html>
